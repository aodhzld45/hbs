import React, { useMemo, useState, useEffect, useMemo as useM } from 'react';
import { createPortal } from 'react-dom';
import { useAiChat } from '../hooks/useAiChat';

type Props = { inferContext: () => string };

export default function AssistantWidget({ inferContext }: Props) {
  const baseParams = useMemo(() => ({
    system: 'You are a helpful assistant for the HSBS portfolio site. Reply in Korean.',
    context: inferContext(),
    model: 'gpt-4o-mini',
    temperature: 0.3,
    maxTokens: 500,
  }), [inferContext]);

  const [open, setOpen] = useState(false);
  const { messages, resp, error, loading, run } = useAiChat(baseParams);
  const [prompt, setPrompt] = useState('');
  const [displayedText, setDisplayedText] = useState('');
  const [introShown, setIntroShown] = useState(false);

  const [showIntroMsg, setShowIntroMsg] = useState(false);

  useEffect(() => {
    if (open && !introShown) {
      setShowIntroMsg(true);
      setIntroShown(true);
    }
  }, [open, introShown]);

  const introMsg = {
    role: 'assistant' as const,
    text: `Î∞òÍ∞ëÏäµÎãàÎã§! üëã  
  Ïù¥ Ï±óÎ¥áÏùÄ HSBS Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÇ¨Ïù¥Ìä∏Ïùò ÌîÑÎ°úÌÜ†ÌÉÄÏûÖÏûÖÎãàÎã§.  

  Ï†ÄÎäî ÏÑúÌòÑÏÑùÏù¥ ÏßÅÏ†ë Í∏∞Ìöç ¬∑ Í∞úÎ∞úÌïú ÌíÄÏä§ÌÉù ÌîÑÎ°úÏ†ùÌä∏ Ï±óÎ¥áÏù¥ÏóêÏöî.  
  Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ÏôÄ Í¥ÄÎ†®Îêú Í∂ÅÍ∏àÏ¶ùÏùÑ ÏûêÏú†Î°≠Í≤å Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî.  

  ‚úÖ ÎãµÎ≥ÄÏùÄ Ï∞∏Í≥†Ïö©ÏúºÎ°úÎßå ÌôúÏö©Ìï¥ Ï£ºÏÑ∏Ïöî.  
  ‚úÖ Î≥∏ ÌîÑÎ°úÏ†ùÌä∏Îäî React + Spring Boot + MySQL Í∏∞Î∞òÏúºÎ°ú Ï†úÏûëÎêòÏóàÏäµÎãàÎã§.  

  üìå ABOUT  
  - ÎÅàÍ∏∞ ÏûàÎäî Í∞úÎ∞úÏûê: Îã§ÏñëÌïú ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú Î¨∏Ï†ú Ìï¥Í≤∞ Ï§ëÏã¨ÏúºÎ°ú Ï†ëÍ∑ºÌïòÎ©∞ ÏïàÏ†ïÏÑ±Í≥º Ìö®Ïú®ÏÑ±ÏùÑ Í≥†ÎØºÌï©ÎãàÎã§.  
  - Íæ∏Ï§ÄÌûà ÏÑ±Ïû•ÌïòÎäî Í∞úÎ∞úÏûê: ÏÉàÎ°úÏö¥ Í∏∞Ïà†Ïóê ÎåÄÌïú Ìù•ÎØ∏ÏôÄ ÏßÅÏ†ë Íµ¨Ï∂ï¬∑Ïö¥ÏòÅ Í≤ΩÌóòÏùÑ ÌÜµÌï¥ ÏÑ±Ïû•Ìï©ÎãàÎã§.  

  üìå PROJECTS  
  - ÏõêÏ£ºÎØ∏ÎûòÏÇ∞ÏóÖÏßÑÌù•Ïõê Íµ¨Ï∂ï (PHP CMS, ÌöåÏõê/ÏòàÏïΩ/ÌåùÏóÖ Í¥ÄÎ¶¨)  
  - SKT OUR365 CONNECT+ Ïö¥ÏòÅ (ÏÇ¨ÎÇ¥Î∞©ÏÜ° ÌîåÎû´Ìèº, Î°úÍ∑∏ Í∞úÎ∞ú)  
  - Ï≤úÏ°∞ ÌÇ§Ïò§Ïä§ÌÅ¨ Î∞è API Ïú†ÏßÄÎ≥¥Ïàò (Ïä§ÌÉÄÌïÑÎìú/ÏÑºÌÖÄÏãúÌã∞)  
  - Ïä§ÎßàÏùºÍ≤åÏù¥Ìä∏ ÍµêÏú°ÌîåÎû´Ìèº Í≥†ÎèÑÌôî (Chart.js ÌÜµÍ≥Ñ, ÏãúÌóò/ÏÑ§Î¨∏)  
  - ÌïúÏñëÎåÄÌïôÍµê ÏûÖÌïôÏ≤ò Î¶¨Îâ¥Ïñº (ÏûÖÌïô ÌéòÏù¥ÏßÄ Í∞úÎ∞ú¬∑Ïú†ÏßÄÎ≥¥Ïàò)  
  - ÎåÄÌÜµÎ†πÍ≤ΩÌò∏Ï≤ò Ïù∏Ïû¨Ï±ÑÏö©ÏÇ¨Ïù¥Ìä∏ (CentOS Í∏∞Î∞ò ÏãúÏä§ÌÖú Í¥ÄÎ¶¨, Ïù∏ÌÑ¥Ïã≠)  

  üìå SKILLS  
  ÌîÑÎ°†Ìä∏ÏóîÎìú ‚Üí Î∞±ÏóîÎìú ‚Üí DevOpsÍπåÏßÄ ÌïòÎÇòÏùò ÌùêÎ¶ÑÏúºÎ°ú Ïó∞Í≤∞Îêú Í∞úÎ∞ú Í≤ΩÌóò.  
  Îã®Ïàú ÏÇ¨Ïö©Ïù¥ ÏïÑÎãàÎùº Î¨∏Ï†ú Ìï¥Í≤∞Í≥º ÏÑúÎπÑÏä§ ÏôÑÏÑ±Ïóê ÏßëÏ§ëÌï©ÎãàÎã§.  

  üìå SECURITIES DATA  
  - Íµ≠ÎÇ¥ Ï¶ùÍ∂å Îç∞Ïù¥ÌÑ∞ ÌååÏù¥ÌîÑÎùºÏù∏ (KRX Batch + KIS OpenAPI)  
  - Ï¢ÖÎ™© ÎßàÏä§ÌÑ∞ Î∞∞Ïπò ÏóÖÏÑúÌä∏, Îã®Í±¥ ÏãúÏÑ∏ Ï°∞Ìöå Ïó∞Îèô  
  - Ï†ÑÏ≤¥ ÌùêÎ¶Ñ: Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ‚Üí Ï†ïÍ∑úÌôî ‚Üí Ï†úÍ≥µ  

  üìå DEPLOY  
  - React(Frontend) + Spring Boot(Backend)  
  - OCI Ubuntu + Apache Î∞∞Ìè¨  
  - GitHub Actions Í∏∞Î∞ò CI/CD  

  üìå SECTIONS  
  - Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄÏóêÏÑú Îì±Î°ùÌïú ÏÑπÏÖò Îç∞Ïù¥ÌÑ∞Î•º ÎèôÏ†ÅÏúºÎ°ú Ï°∞Î¶Ω/Î†åÎçîÎßÅ  
  - Ï†ïÌï¥ÏßÑ ÌãÄÏù¥ ÏïÑÎãå ÏΩòÌÖêÏ∏† Ï§ëÏã¨ Ïú†Ïó∞ Î†àÏù¥ÏïÑÏõÉ ÏßÄÏõê  
  - (‚Äª ÌòÑÏû¨Îäî ÌîÑÎ°úÌÜ†ÌÉÄÏûÖ Î≤ÑÏ†Ñ)  

  üìå OPENAI CHATBOT  
  - Model: gpt-4o-mini  
  - Î∞±ÏóîÎìú Î°úÏßÅ & ÌîÑÎ°†Ìä∏ UI: GPTÎ•º ÌÜµÌï¥ Ï†êÏßÑÏ†ÅÏúºÎ°ú Í≥†ÎèÑÌôî Ï§ë üöÄ  

  Ïûê, Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî? üôÇ`
  };

  // ÌÉÄÏûê Ìö®Í≥º
  useEffect(() => {
    if (!resp?.text) return;
    let i = 0;
    setDisplayedText('');
    const t = setInterval(() => {
      i++;
      setDisplayedText(resp.text.slice(0, i));
      if (i >= resp.text.length) clearInterval(t);
    }, 25);
    return () => clearInterval(t);
  }, [resp?.text]);

  // ÌÉÄÏûê Ï∂úÎ†• Ï§ëÏóî messagesÏùò ÎßàÏßÄÎßâ assistantÎ•º Ïà®Í∏∞Í∏∞
  const lastAssistantIndex = useM(() => {
    for (let i = messages.length - 1; i >= 0; i--) {
      if (messages[i].role === 'assistant') return i;
    }
    return -1;
  }, [messages]);

  const renderMessages = useM(() => {
    const hideLastAssistant = !!(resp && !loading); // ÌÉÄÏûê Ï∂úÎ†• Ï§ë
    return messages.map((m, i) => {
      if (hideLastAssistant && i === lastAssistantIndex) return null;
      return (
        <div key={i} className={`flex ${m.role === 'user' ? 'justify-end' : 'justify-start'} gap-2`}>
          {m.role === 'assistant' && (
            <img src="/image/hsbs_dog_avatar_4.png" alt="HSBS Dog" className="w-8 h-8 rounded-full self-end" />
          )}
          <div
            className={`max-w-[75%] px-3 py-2 rounded-lg ${
              m.role === 'user'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-200 dark:bg-gray-700 dark:text-gray-100'
            }`}
          >
            {m.text}
          </div>
        </div>
      );
    });
  }, [messages, resp, loading, lastAssistantIndex]);

  return createPortal(
    <>
      {!open && (
        <button
          onClick={() => setOpen(true)}
          className="fixed bottom-6 right-6 z-[2147483647] rounded-full p-2 bg-blue-600 text-white shadow-lg"
          aria-label="Open Assistant"
        >
          <img src="/image/hsbs_dog_avatar_4.png" alt="Open Assistant" className="w-8 h-8 rounded-full" />
        </button>
      )}

      {open && (
        <div className="fixed bottom-6 right-6 w-[340px] h-[480px] z-[2147483647] flex flex-col bg-white dark:bg-[#121212] border rounded-lg shadow-xl">
          <div className="flex justify-between items-center p-2 border-b">
            <span className="font-semibold text-sm dark:text-gray-100">HSBS Assistant</span>
            <button
              className="text-gray-500 hover:text-gray-800 dark:hover:text-gray-300 dark:text-gray-100"
              onClick={() => setOpen(false)}
              aria-label="Close"
            >
              ‚úï
            </button>
          </div>

          <div className="flex-1 overflow-y-auto p-3 space-y-4 text-sm">
            {showIntroMsg && (
              <div className="flex justify-start gap-2">
                <img src="/image/hsbs_dog_avatar_4.png" alt="HSBS Dog" className="w-8 h-8 rounded-full self-end" />
                <div className="bg-gray-200 dark:bg-gray-100 px-3 py-2 rounded-lg whitespace-pre-wrap">
                  {introMsg.text}
                </div>
              </div>
            )}

            {renderMessages}

            {/* Î°úÎî© Ï§ë: Ï†ê 3Í∞ú */}
            {loading && (
              <div className="flex justify-start gap-2">
                <img src="/image/hsbs_dog_avatar_4.png" alt="HSBS Dog" className="w-8 h-8 rounded-full self-end" />
                <div className="bg-gray-200 dark:bg-gray-700 px-3 py-2 rounded-lg">...</div>
              </div>
            )}

            {/* ÌÉÄÏûê Ìö®Í≥º Î≤ÑÎ∏î */}
            {resp && !loading && (
              <div className="flex justify-start gap-2">
                <img src="/image/hsbs_dog_avatar_4.png" alt="HSBS Dog" className="w-8 h-8 rounded-full self-end" />
                <div className="bg-gray-200 dark:bg-gray-700 px-3 py-2 rounded-lg whitespace-pre-wrap">
                  {displayedText}
                </div>
              </div>
            )}

            {error && <div className="text-red-600">{String(error)}</div>}
          </div>

          <form
            onSubmit={(e) => {
              e.preventDefault();
              if (!prompt.trim()) return;
              run(prompt);    // Ìò∏Ï∂úÏùÄ onSubmitÏóêÏÑúÎßå
              setPrompt('');
            }}
            className="p-2 border-t flex gap-2"
          >
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="Î¨¥ÏóáÏù¥Îì† Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî..."
              className="flex-1 border rounded px-2 py-1 text-sm resize-none"
              rows={2}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  (e.currentTarget.form as HTMLFormElement)?.requestSubmit(); // Ï§ëÎ≥µ Ìò∏Ï∂ú Î∞©ÏßÄ
                }
              }}
            />
            <button
              type="submit"
              disabled={loading}
              className="px-3 py-1 bg-blue-600 text-white rounded text-sm"
            >
              Î≥¥ÎÇ¥Í∏∞
            </button>
          </form>
        </div>
      )}
    </>,
    document.body
  );
}
