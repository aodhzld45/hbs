name: CI/CD - HSBS_PROD

on:
  push:
    branches: [ "main" ]     # main push: 빌드만
    tags:
      - 'deploy-*'           # deploy-YYYY-MM-DD 형태 태그 push: 빌드+배포
      #- 'deploy-2025-08-12 HBS 포트폴리오 정기 배포'           # deploy-YYYY-MM-DD 형태 태그 push: 빌드+배포

  workflow_dispatch:         # 수동 실행도 배포 허용

concurrency:
  group: hsbs_prod-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  # ====================
  # 1) FRONTEND BUILD
  # ====================
  build-fe:
    name: Build Frontend
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    defaults:
      run:
        working-directory: hsb-fe
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: hsb-fe/package-lock.json

      # ── 디버그에 도움되는 기본 정보 출력 ─────────────────────────────
      - name: Print env / node info
        run: |
          set -euxo pipefail
          node -v
          npm -v
          echo "RUNNER_OS=$RUNNER_OS"
          echo "PWD=$(pwd)"
          echo "Listing workspace:"
          ls -lah

      - name: Inject .env.production from GitHub Secrets
        shell: bash
        env:
          REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
        run: |
          set -euo pipefail
          if [ -z "${REACT_APP_API_BASE_URL:-}" ]; then
            echo "Error: REACT_APP_API_BASE_URL is empty"; exit 1
          fi
          CLEAN_BASE="$(printf "%s" "$REACT_APP_API_BASE_URL" | tr -d '\r' | sed 's|/*$||')"
          echo "REACT_APP_API_BASE_URL=${CLEAN_BASE}" > .env.production
          echo "Created .env.production"
          # 키만 마스킹해서 확인
          grep -E '^[A-Z_]+=' .env.production | sed 's/=.*/=<masked>/'

      # ── 의존성 설치(로그 저장) ───────────────────────────────────────
      - name: Install deps (verbose)
        run: |
          set -euxo pipefail
          npm ci --no-audit --no-fund --verbose 2>&1 | tee ../npm-ci.log

      # ── 빌드(경고-에러화 방지, 메모리 여유, 로그 저장) ───────────────
      - name: Build (capture logs)
        run: |
          set -euxo pipefail
          npm run build --loglevel verbose 2>&1 | tee ../npm-build.log
        env:
          CI: "false"                 # CRA 경고 에러 승격 방지
          NODE_OPTIONS: "--max_old_space_size=4096"
          # 필요 시 소스맵 경고 무시
          # GENERATE_SOURCEMAP: "false"

      - name: Verify FE build exists
        run: test -d build && ls -lah build

      # ── 실패 원인 파악을 위한 로그/디렉터리 업로드 ─────────────────────
      - name: Upload FE debug logs (always)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: fe-debug-logs
          path: |
            npm-ci.log
            npm-build.log
            ~/.npm/_logs
          if-no-files-found: ignore

      - name: Upload FE artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-build
          path: hsb-fe/build


  # ====================
  # 2) BACKEND BUILD
  # ====================
  build-bo:
    name: Build Backend
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    defaults:
      run:
        working-directory: hsb-bo
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Grant Gradle wrapper execute permission
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Upload BO artifact
        uses: actions/upload-artifact@v4
        with:
          name: bo-jar
          path: hsb-bo/build/libs/hsb-bo.jar

  # ====================
  # 3) DEPLOY
  # ====================
  deploy:
    name: Deploy to Server (systemd)
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    needs: [ build-fe, build-bo ]
    if: startsWith(github.ref, 'refs/tags/deploy-') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check passwordless sudo
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            sudo -n true
            echo "Passwordless sudo OK"

      # --- FE ---
      - name: Download FE artifact
        uses: actions/download-artifact@v4
        with:
          name: fe-build
          path: fe-build

      - name: Clean FE build dir on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            mkdir -p /home/hbs/hbs-fe/build
            rm -rf /home/hbs/hbs-fe/build/*

      - name: Copy FE to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./fe-build/**"
          target: "/home/hbs/hbs-fe/build"
          strip_components: 1
          overwrite: true

      - name: Sync FE build to Apache docroot (exclude .htaccess)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            sudo mkdir -p /var/www/html
            # rsync: 소스 경로 끝에 / 를 붙여 '내용물'만 동기화
            sudo rsync -av --delete --exclude='.htaccess' /home/hbs/hbs-fe/build/ /var/www/html/
            # (선택) 퍼미션/소유권 정리 - 환경에 맞게 조정
            sudo chown -R www-data:www-data /var/www/html || true
            sudo find /var/www/html -type d -exec chmod 755 {} \; || true
            sudo find /var/www/html -type f -exec chmod 644 {} \; || true

      - name: Verify Apache docroot contents
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            echo "[ls] /var/www/html"
            sudo ls -lah /var/www/html | sed -n '1,80p'

      # --- BO ---
      - name: Download BO artifact
        uses: actions/download-artifact@v4
        with:
          name: bo-jar
          path: bo-jar

      - name: Copy BO jar to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "bo-jar/hsb-bo.jar"
          target: "/home/hbs/hbs-be/"
          overwrite: true
          strip_components: 1

      # --- ENV 파일 생성/갱신 ---
      - name: Create/Update /etc/hsb/hsb-bo.env on server
        uses: appleboy/ssh-action@v1.2.0
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          FILE_UPLOAD_PATH: ${{ secrets.FILE_UPLOAD_PATH }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          KIS_DOMAIN: ${{ secrets.KIS_DOMAIN }}
          KIS_APP_KEY: ${{ secrets.KIS_APP_KEY }}
          KIS_APP_SECRET: ${{ secrets.KIS_APP_SECRET }}
          KRX_SYMBOLS_OUT_PATH: ${{ secrets.KRX_SYMBOLS_OUT_PATH }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: SPRING_DATASOURCE_URL,SPRING_DATASOURCE_USERNAME,SPRING_DATASOURCE_PASSWORD,MAIL_HOST,MAIL_PORT,MAIL_USERNAME,MAIL_PASSWORD,FILE_UPLOAD_PATH,JWT_SECRET,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
          script: |
            sudo mkdir -p /etc/hsb
            sudo bash -c "cat >/etc/hsb/hsb-bo.env <<EOF
            SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
            SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
            SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}

            MAIL_HOST=${MAIL_HOST}
            MAIL_PORT=${MAIL_PORT}
            MAIL_USERNAME=${MAIL_USERNAME}
            MAIL_PASSWORD=${MAIL_PASSWORD}

            FILE_UPLOAD_PATH=${FILE_UPLOAD_PATH}
            JWT_SECRET=${JWT_SECRET}

            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            AWS_REGION=${AWS_REGION}

            KIS_DOMAIN=${KIS_DOMAIN}
            KIS_APP_KEY=${KIS_APP_KEY}
            KIS_APP_SECRET=${KIS_APP_SECRET}

            KRX_SYMBOLS_OUT_PATH=${KRX_SYMBOLS_OUT_PATH}
            EOF"
                        sudo chmod 600 /etc/hsb/hsb-bo.env
                        echo "[env] /etc/hsb/hsb-bo.env updated"

      # --- RESTART & LOG ---
      - name: Restart Backend via systemd and show logs
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            sudo systemctl daemon-reload
            sudo systemctl restart hsb-bo || true
            sudo systemctl status hsb-bo --no-pager -l || true

            echo "=== Recent Logs ==="
            sudo journalctl -u hsb-bo.service -n 100 --no-pager || true

            echo "=== Health Check ==="
            if command -v curl >/dev/null 2>&1; then
              code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health || echo 000)
              echo "Health HTTP code: $code"
            fi
