name: CI/CD - HSBS_PROD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: hsbs_prod-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-fe:
    name: Build Frontend
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    defaults:
      run:
        working-directory: hsb-fe
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: hsb-fe/package-lock.json

      - name: Inject .env.production from GitHub Secrets
        shell: bash
        run: |
          cat > .env.production <<'ENV'
          REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
          ENV
          echo "Created .env.production"

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build
        env:
          CI: ""   # CRA 경고를 에러로 취급하지 않음

      - name: Verify FE build exists
        run: test -d build && ls -lah build

      - name: Upload FE artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-build
          path: hsb-fe/build

  build-bo:
    name: Build Backend
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    defaults:
      run:
        working-directory: hsb-bo
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Grant Gradle wrapper execute permission
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Upload BO artifact
        uses: actions/upload-artifact@v4
        with:
          name: bo-jar
          path: hsb-bo/build/libs/hsb-bo.jar   # 빌드 산출물 파일명 고정

  deploy:
    name: Deploy to Server (nohup)
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    needs: [ build-fe, build-bo ]
    steps:
      # ✅ 레포 체크아웃 (외부 config 파일 복사용)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # FE
      - name: Download FE artifact
        uses: actions/download-artifact@v4
        with:
          name: fe-build
          path: fe-build

      - name: Clean FE build dir on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            mkdir -p /home/hbs/hbs-fe/build
            rm -rf /home/hbs/hbs-fe/build/*

      - name: Copy FE to server (/home/hbs/hbs-fe/build)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./fe-build/**"
          target: "/home/hbs/hbs-fe/build"
          strip_components: 1
          overwrite: true

      # BO
      - name: Download BO artifact
        uses: actions/download-artifact@v4
        with:
          name: bo-jar
          path: bo-jar

      - name: Copy BO jar to server (/home/hbs/hbs-be/)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "bo-jar/hsb-bo.jar"   # 러너 경로
          target: "/home/hbs/hbs-be/"   # 서버 디렉터리
          overwrite: true
          strip_components: 1           # => /home/hbs/hbs-be/hsb-bo.jar 로 바로 복사

      # 외부 config도 함께 배포(항상 최신 설정 강제 적용)
      - name: Ensure config dir on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p /home/hbs/hbs-be/config

      - name: Verify prod yml exists on runner
        run: ls -al hsb-bo/src/main/resources/application-prod.yml

      - name: Copy application-prod.yml to server (external config)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "hsb-bo/src/main/resources/application-prod.yml"
          target: "/home/hbs/hbs-be/config/"
          overwrite: true
          strip_components: 3            # => config/application-prod.yml 로 배치

      - name: Restart backend with nohup (prod profile + env)
        uses: appleboy/ssh-action@v1.2.0
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          FILE_UPLOAD_PATH: ${{ secrets.FILE_UPLOAD_PATH }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          APP_CORS_ENABLED: ${{ secrets.APP_CORS_ENABLED }}
          APP_CORS_ALLOWED: ${{ secrets.APP_CORS_ALLOWED }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: SPRING_DATASOURCE_URL,SPRING_DATASOURCE_USERNAME,SPRING_DATASOURCE_PASSWORD,MAIL_HOST,MAIL_PORT,MAIL_USERNAME,MAIL_PASSWORD,FILE_UPLOAD_PATH,JWT_SECRET,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,APP_CORS_ENABLED,APP_CORS_ALLOWED
          script: |
            #!/usr/bin/env bash
            set -euo pipefail
            cd /home/hbs/hbs-be || exit 1

            # 유틸(없으면 설치)
            if ! command -v fuser >/dev/null 2>&1; then
              sudo apt-get update -y >/dev/null 2>&1 || true
              sudo apt-get install -y psmisc unzip >/dev/null 2>&1 || true
            fi

            # stop (PID/포트 정리)
            if [ -f app.pid ]; then
              oldpid="$(cat app.pid || true)"
              if [ -n "${oldpid:-}" ] && ps -p "$oldpid" >/dev/null 2>&1; then
                echo "[stop] kill PID $oldpid"
                kill "$oldpid" >/dev/null 2>&1 || true
                for i in {1..5}; do
                  ps -p "$oldpid" >/dev/null 2>&1 || break
                  sleep 1
                done
                ps -p "$oldpid" >/dev/null 2>&1 && kill -9 "$oldpid" || true
              fi
              rm -f app.pid
            fi
            fuser -k 8080/tcp >/dev/null 2>&1 || true

            # log rotate
            if [ -f app.log ]; then
              ts="$(date +%Y%m%d-%H%M%S)"
              mv app.log "app.$ts.log" || true
            fi
            : > app.log

            # jar 존재 확인 (고정명)
            if [ ! -f hsb-bo.jar ]; then
              echo "[error] hsb-bo.jar not found"; ls -al
              exit 1
            fi
            chmod 644 hsb-bo.jar 2>/dev/null || true

            # 참고: JAR 내부와 외부 config를 출력해 최종 적용 파일 확인
            echo "----- INSIDE JAR (application-prod.yml) -----"
            unzip -p hsb-bo.jar BOOT-INF/classes/application-prod.yml | sed -n '1,80p' || true
            echo "----- EXTERNAL (config/application-prod.yml) -----"
            sed -n '1,80p' config/application-prod.yml || true

            # 자바 경로 탐지
            JAVA_BIN="$(command -v java || true)"
            if [ -z "$JAVA_BIN" ]; then
              echo "[error] java not found in PATH"; exit 1
            fi
            echo "[java] $($JAVA_BIN -version 2>&1 | head -n1)"

            # 실행 (prod 명시 + 8080 고정) - 외부 config가 classpath보다 우선 적용됨
            echo "[run] nohup java -jar hsb-bo.jar --spring.profiles.active=prod --server.port=8080"
            nohup "$JAVA_BIN" -Xms256m -Xmx512m -jar hsb-bo.jar \
              --spring.profiles.active=prod \
              --server.port=8080 \
              >> app.log 2>&1 &

            newpid=$!
            echo "$newpid" > app.pid
            echo "[start] PID $newpid"

            # 포트 리슨 대기
            ok=0
            for i in {1..20}; do
              ss -ltn 2>/dev/null | grep -q ":8080 " && { ok=1; break; }
              sleep 1
            done
            echo "[status] port_listening=$ok"
            ps -p "$newpid" -o pid,cmd= || true

            # actuator health (있으면 체크)
            if command -v curl >/dev/null 2>&1; then
              if curl -sf --max-time 3 http://localhost:8080/actuator/health >/dev/null 2>&1; then
                echo "[health] actuator OK"
              else
                echo "[health] actuator check FAILED"
                tail -n 200 app.log || true
                exit 1
              fi
            fi

            tail -n 120 app.log || true
