name: CI/CD - HSBS_PROD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: hsbs_prod-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-fe:
    name: Build Frontend
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    defaults:
      run:
        working-directory: hsb-fe
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: hsb-fe/package-lock.json

      - name: Inject .env.production from GitHub Secrets
        shell: bash
        run: |
          cat > .env.production <<'ENV'
          REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
          ENV
          echo "Created .env.production"

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build
        env:
          CI: ""   # CRA 경고를 에러로 취급하지 않음

      - name: Verify FE build exists
        run: test -d build && ls -lah build

      - name: Upload FE artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-build
          path: hsb-fe/build

  build-bo:
    name: Build Backend
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    defaults:
      run:
        working-directory: hsb-bo
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      #  application-prod.yml 생성 (spring: 1회만)
      - name: Create application-prod.yml from secrets
        shell: bash
        run: |
          cat > src/main/resources/application-prod.yml <<'YAML'
          spring:
          datasource:
            url: ${{ secrets.SPRING_DATASOURCE_URL }}
            username: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
            password: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}

          jpa:
            hibernate:
              ddl-auto: none
            properties:
              hibernate:
                format_sql: true
                dialect: org.hibernate.dialect.MySQL8Dialect
                physical_naming_strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
            show-sql: true

          servlet:
            multipart:
              max-file-size: 50MB
              max-request-size: 50MB

          mail:
            host: ${{ secrets.MAIL_HOST }}
            port: ${{ secrets.MAIL_PORT }}
            username: ${{ secrets.MAIL_USERNAME }}
            password: ${{ secrets.MAIL_PASSWORD }}
            properties:
              mail.smtp.auth: true
              mail.smtp.starttls.enable: true
            default-encoding: UTF-8

          http:
            encoding:
              charset: UTF-8
              enabled: true
              force: true

          server:
            servlet:
              session:
                timeout: 30m

          management:
            endpoints:
              web:
                exposure:
                  include: health,info
            endpoint:
              health:
                show-details: always

          cloud:
            aws:
              credentials:
                access-key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              region:
                static: ${{ secrets.AWS_REGION }}

          logging:
            charset:
              console: UTF-8
              file: UTF-8

          springdoc:
            api-docs:
              path: /api-docs
            swagger-ui:
              path: /swagger-ui.html
              operations-sorter: alpha
              tags-sorter: alpha
              display-request-duration: true

          jwt:
            secret: ${{ secrets.JWT_SECRET }}
            expiration: 3600000

          file:
            upload-path: ${{ secrets.FILE_UPLOAD_PATH }}

          app:
            cors:
              enabled: ${{ secrets.APP_CORS_ENABLED }}
              allowed-origins: ${{ secrets.APP_CORS_ALLOWED }}
          YAML

      #  생성된 yml 확인 + 중복 spring 키 검증
      - name: Show application-prod.yml (debug)
        run: sed -n '1,200p' src/main/resources/application-prod.yml

      - name: Validate application-prod.yml (no duplicate "spring")
        run: |
          awk '/^spring:/{c++} END{ if(c!=1){ print "ERROR: spring key count=" c; exit 1} }' src/main/resources/application-prod.yml

      - name: Grant Gradle wrapper execute permission
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Upload BO artifact
        uses: actions/upload-artifact@v4
        with:
          name: bo-jar
          path: hsb-bo/build/libs/hsb-bo.jar   # ← 고정 파일명 업로드

  deploy:
    name: Deploy to Server (nohup)
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    needs: [ build-fe, build-bo ]
    steps:
      - name: Download FE artifact
        uses: actions/download-artifact@v4
        with:
          name: fe-build
          path: fe-build

      - name: Download BO artifact
        uses: actions/download-artifact@v4
        with:
          name: bo-jar
          path: bo-jar

      - name: Check artifacts on runner
        run: |
          ls -al ./bo-jar || true
          test -f ./bo-jar/hsb-bo.jar && sha256sum ./bo-jar/hsb-bo.jar

      - name: Clean FE build dir on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            mkdir -p /home/hbs/hbs-fe/build
            rm -rf /home/hbs/hbs-fe/build/*

      - name: Copy FE to server (/home/hbs/hbs-fe/build)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./fe-build/**"
          target: "/home/hbs/hbs-fe/build"
          strip_components: 1
          overwrite: true

      - name: Copy BO jar to server (/home/hbs/hbs-be/)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "bo-jar/hsb-bo.jar"
          target: "/home/hbs/hbs-be/"
          overwrite: true
          strip_components: 0

      - name: Restart backend with nohup (PID file, robust)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            #!/usr/bin/env bash
            set -u

            cd /home/hbs/hbs-be || exit 1

            if ! command -v fuser >/dev/null 2>&1; then
              sudo apt-get update -y >/dev/null 2>&1 || true
              sudo apt-get install -y psmisc >/dev/null 2>&1 || true
            fi

            # stop (PID file 우선)
            if [ -f app.pid ]; then
              oldpid="$(cat app.pid || true)"
              if [ -n "${oldpid:-}" ] && ps -p "$oldpid" >/dev/null 2>&1; then
                kill "$oldpid" >/dev/null 2>&1 || true
                for i in {1..5}; do
                  ps -p "$oldpid" >/dev/null 2>&1 || break
                  sleep 1
                done
                ps -p "$oldpid" >/dev/null 2>&1 && kill -9 "$oldpid" || true
              fi
              rm -f app.pid
            fi
            fuser -k 8080/tcp >/dev/null 2>&1 || true

            # logs
            if [ -f app.log ]; then
              ts="$(date +%Y%m%d-%H%M%S)"
              mv app.log "app.$ts.log" || true
            fi
            : > app.log

            # run
            if [ ! -f hsb-bo.jar ]; then
              echo "[error] hsb-bo.jar not found"; ls -al; exit 0
            fi
            chmod 644 hsb-bo.jar 2>/dev/null || true

            nohup /usr/bin/java -Xms256m -Xmx512m -jar hsb-bo.jar \
              --spring.profiles.active=prod \
              --server.port=8080 \
              >> app.log 2>&1 &

            newpid=$!
            echo "$newpid" > app.pid
            echo "[start] PID $newpid"

            ok=0
            for i in {1..20}; do
              ss -ltn 2>/dev/null | grep -q ":8080 " && { ok=1; break; }
              sleep 1
            done

            echo "[status] listening=$ok"
            ps -p "$newpid" -o pid,cmd= || true
            tail -n 80 app.log || true
            exit 0
