name: CI/CD - HSBS_PROD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: hsbs_prod-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-fe:
    name: Build Frontend
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    defaults:
      run:
        working-directory: hsb-fe
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: hsb-fe/package-lock.json

      - name: Inject .env.production from GitHub Secrets
        shell: bash
        run: |
          v='${{ secrets.REACT_APP_API_BASE_URL }}'
          echo "REACT_APP_API_BASE_URL=$v"
          case "$v" in
            */api|*/api/) echo "::error::REACT_APP_API_BASE_URL must NOT end with /api (code appends /api)."; exit 1;;
          esac
          cat > .env.production <<'ENV'
          REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
          ENV
          echo "Created .env.production"

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build
        env:
          CI: ""

      - name: Verify FE build exists
        run: test -d build && ls -lah build

      - name: Upload FE artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-build
          path: hsb-fe/build

  build-bo:
    name: Build Backend
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    defaults:
      run:
        working-directory: hsb-bo
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Grant Gradle wrapper execute permission
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Upload BO artifact
        uses: actions/upload-artifact@v4
        with:
          name: bo-jar
          path: hsb-bo/build/libs/hsb-bo.jar

  deploy:
    name: Deploy to Server (systemd)
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    needs: [ build-fe, build-bo ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # === FE ===
      - name: Download FE artifact
        uses: actions/download-artifact@v4
        with:
          name: fe-build
          path: fe-build

      - name: Clean FE build dir on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            mkdir -p /home/hbs/hbs-fe/build
            rm -rf /home/hbs/hbs-fe/build/*

      - name: Copy FE to server (/home/hbs/hbs-fe/build)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./fe-build/**"
          target: "/home/hbs/hbs-fe/build"
          strip_components: 1
          overwrite: true

      # === BO ===
      - name: Download BO artifact
        uses: actions/download-artifact@v4
        with:
          name: bo-jar
          path: bo-jar

      - name: Copy BO jar to server (/home/hbs/hbs-be/hsb-bo.jar)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "bo-jar/hsb-bo.jar"
          target: "/home/hbs/hbs-be/"
          overwrite: true
          strip_components: 1

      # 외부 prod yml (유지 시)
      - name: Ensure config dir on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p /home/hbs/hbs-be/config

      - name: Verify prod yml exists on runner
        run: ls -al hsb-bo/src/main/resources/application-prod.yml

      - name: Copy application-prod.yml to server (external config)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "hsb-bo/src/main/resources/application-prod.yml"
          target: "/home/hbs/hbs-be/config/"
          overwrite: true
          strip_components: 4

      # === 런타임 환경변수 주입 (env 파일 없이) ===
      - name: Set systemd runtime environment from Secrets
        uses: appleboy/ssh-action@v1.2.0
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          FILE_UPLOAD_PATH: ${{ secrets.FILE_UPLOAD_PATH }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          APP_CORS_ENABLED: ${{ secrets.APP_CORS_ENABLED }}
          APP_CORS_ALLOWED: ${{ secrets.APP_CORS_ALLOWED }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: SPRING_DATASOURCE_URL,SPRING_DATASOURCE_USERNAME,SPRING_DATASOURCE_PASSWORD,MAIL_HOST,MAIL_PORT,MAIL_USERNAME,MAIL_PASSWORD,FILE_UPLOAD_PATH,JWT_SECRET,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,APP_CORS_ENABLED,APP_CORS_ALLOWED
          script: |
            set -euo pipefail
            # manager 환경에 세팅(재부팅/리로드 전까지 유지)
            sudo systemctl set-environment \
              SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}" \
              SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}" \
              SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}" \
              MAIL_HOST="${MAIL_HOST}" \
              MAIL_PORT="${MAIL_PORT}" \
              MAIL_USERNAME="${MAIL_USERNAME}" \
              MAIL_PASSWORD="${MAIL_PASSWORD}" \
              FILE_UPLOAD_PATH="${FILE_UPLOAD_PATH}" \
              JWT_SECRET="${JWT_SECRET}" \
              AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
              AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
              AWS_REGION="${AWS_REGION}" \
              APP_CORS_ENABLED="${APP_CORS_ENABLED}" \
              APP_CORS_ALLOWED="${APP_CORS_ALLOWED}"
            echo "[systemd env] variables set for hsb-bo (manager environment)."

      # === systemd로 재시작/검증 ===
      - name: Restart Backend via systemd
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            chmod 644 /home/hbs/hbs-be/hsb-bo.jar || true
            sudo systemctl daemon-reload
            sudo systemctl restart hsb-bo
            sudo systemctl status hsb-bo --no-pager -l || true

            # 포트 리슨 대기(최대 60초)
            for i in {1..60}; do
              ss -ltn 2>/dev/null | grep -q ':8080 ' && { echo '[status] listening ok'; break; }
              sleep 1
            done

            # 헬스체크(있으면)
            if command -v curl >/dev/null 2>&1; then
              code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health || echo 000)
              echo "[health] http_code=${code}"
            fi

            # 최근 로그
            tail -n 200 /home/hbs/hbs-be/app.log || true
