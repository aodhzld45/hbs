name: CI/CD - HSBS_PROD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: hsbs_prod-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-fe:
    name: Build Frontend
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    defaults:
      run:
        working-directory: hsb-fe
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: hsb-fe/package-lock.json

      - name: Inject .env.production from GitHub Secrets
        shell: bash
        run: |
          cat > .env.production <<'ENV'
          REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
          ENV
          echo "Created .env.production"

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build
        env:
          CI: ""   # CRA 경고를 에러로 취급하지 않음

      - name: Verify FE build exists
        run: test -d build && ls -lah build

      - name: Upload FE artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-build
          path: hsb-fe/build

  build-bo:
    name: Build Backend
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    defaults:
      run:
        working-directory: hsb-bo
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Grant Gradle wrapper execute permission
        run: chmod +x ./gradlew

      # (진단1) 현재 체크아웃된 커밋 / 레포의 prod yml 실제 내용 확인
      - name: Show commit & repo application-prod.yml (before build)
        run: |
          echo "== commit ==" && git rev-parse HEAD && git log -1 --oneline
          echo "== search all application-prod.yml/.yaml under resources =="
          git ls-files | grep -E '^hsb-bo/src/main/resources/.*/?application-prod\.ya?ml$' || true
          echo "== file content (src/main/resources/application-prod.yml) =="
          sed -n '1,200p' src/main/resources/application-prod.yml || echo "not found"
          echo "== legacy tokens in resources =="
          grep -R --line-number -E 'DB_HOST_PROD|DB_USER_PROD|DB_PASS_PROD|AWS_ACCESS_KEY_PROD' src/main/resources || true

      # (진단 보강) 어떤 리소스가 복사되는지 Gradle 로그로 확인
      - name: Gradle processResources (verbose)
        run: ./gradlew :hsb-bo:processResources --info --stacktrace

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # (진단2) 빌드된 JAR 내부의 prod yml 내용 확인
      - name: Inspect built jar (application-prod.yml)
        run: |
          JAR=build/libs/hsb-bo.jar
          echo "== list yml in jar ==" && jar tf "$JAR" | grep -E 'application.*\.ya?ml' || true
          rm -rf _jarcheck && mkdir _jarcheck
          (cd _jarcheck && jar -xf "../$JAR" BOOT-INF/classes/application-prod.yml)
          echo "== content of application-prod.yml inside JAR =="
          sed -n '1,200p' _jarcheck/BOOT-INF/classes/application-prod.yml || true
          echo "== JAR sha256 ==" && sha256sum "$JAR"

      - name: Upload BO artifact
        uses: actions/upload-artifact@v4
        with:
          name: bo-jar
          path: hsb-bo/build/libs/hsb-bo.jar

  deploy:
    name: Deploy to Server (nohup)
    runs-on: ubuntu-latest
    environment: HSBS_PROD
    needs: [ build-fe, build-bo ]
    steps:
      - name: Download FE artifact
        uses: actions/download-artifact@v4
        with:
          name: fe-build
          path: fe-build

      - name: Download BO artifact
        uses: actions/download-artifact@v4
        with:
          name: bo-jar
          path: bo-jar

      - name: Check artifacts on runner
        run: |
          ls -al ./bo-jar || true
          test -f ./bo-jar/hsb-bo.jar && sha256sum ./bo-jar/hsb-bo.jar

      # FE 배포
      - name: Clean FE build dir on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            mkdir -p /home/hbs/hbs-fe/build
            rm -rf /home/hbs/hbs-fe/build/*

      - name: Copy FE to server (/home/hbs/hbs-fe/build)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "./fe-build/**"
          target: "/home/hbs/hbs-fe/build"
          strip_components: 1
          overwrite: true

      # BO 배포
      - name: Copy BO jar to server (/home/hbs/hbs-be/)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "bo-jar/hsb-bo.jar"
          target: "/home/hbs/hbs-be/"
          overwrite: true
          strip_components: 0

      # (진단3a) 서버에 복사된 JAR 해시
      - name: Server jar checksum (after copy)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/hbs/hbs-be || exit 1
            echo "== server jar sha256 ==" && sha256sum hsb-bo.jar || true

      # (진단3b) 서버 JAR 내부 prod yml 내용
      - name: Inspect prod yml on server (inside jar)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/hbs/hbs-be || exit 1
            rm -rf _jarcheck && mkdir _jarcheck
            (cd _jarcheck && jar -xf ../hsb-bo.jar BOOT-INF/classes/application-prod.yml)
            echo "== content of application-prod.yml inside server JAR =="
            sed -n '1,200p' _jarcheck/BOOT-INF/classes/application-prod.yml || true

      # 재기동 (환경변수 → 앱 주입)
      - name: Restart backend with nohup (env -> app)
        uses: appleboy/ssh-action@v1.2.0
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          FILE_UPLOAD_PATH: ${{ secrets.FILE_UPLOAD_PATH }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          APP_CORS_ENABLED: ${{ secrets.APP_CORS_ENABLED }}
          APP_CORS_ALLOWED: ${{ secrets.APP_CORS_ALLOWED }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: SPRING_DATASOURCE_URL,SPRING_DATASOURCE_USERNAME,SPRING_DATASOURCE_PASSWORD,MAIL_HOST,MAIL_PORT,MAIL_USERNAME,MAIL_PASSWORD,FILE_UPLOAD_PATH,JWT_SECRET,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,APP_CORS_ENABLED,APP_CORS_ALLOWED
          script: |
            #!/usr/bin/env bash
            set -u
            cd /home/hbs/hbs-be || exit 1
            if [ -f app.pid ]; then
              oldpid="$(cat app.pid || true)"
              if [ -n "${oldpid:-}" ] && ps -p "$oldpid" >/dev/null 2>&1; then
                kill "$oldpid" >/dev/null 2>&1 || true
                for i in {1..5}; do ps -p "$oldpid" >/dev/null 2>&1 || break; sleep 1; done
                ps -p "$oldpid" >/dev/null 2>&1 && kill -9 "$oldpid" || true
              fi
              rm -f app.pid
            fi
            fuser -k 8080/tcp >/dev/null 2>&1 || true
            : > app.log
            [ -f hsb-bo.jar ] || { echo "[error] hsb-bo.jar not found"; ls -al; exit 0; }
            nohup /usr/bin/java -Xms256m -Xmx512m -jar hsb-bo.jar \
              --spring.profiles.active=prod \
              --server.port=8080 >> app.log 2>&1 &
            echo $! > app.pid
            for i in {1..20}; do ss -ltn 2>/dev/null | grep -q ":8080 " && break; sleep 1; done
            tail -n 120 app.log || true
